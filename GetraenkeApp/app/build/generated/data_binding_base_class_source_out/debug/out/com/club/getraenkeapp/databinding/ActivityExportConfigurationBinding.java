// Generated by view binder compiler. Do not edit!
package com.club.getraenkeapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.club.getraenkeapp.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityExportConfigurationBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final Button buttonBack;

  @NonNull
  public final Button buttonBrowseLocal;

  @NonNull
  public final Button buttonMonthlyClosing;

  @NonNull
  public final Button buttonSave;

  @NonNull
  public final Button buttonTestLocal;

  @NonNull
  public final Button buttonTestNetwork;

  @NonNull
  public final CheckBox checkBoxAutoBackup;

  @NonNull
  public final EditText editTextBackupInterval;

  @NonNull
  public final EditText editTextLocalPath;

  @NonNull
  public final EditText editTextNetworkPath;

  @NonNull
  public final LinearLayout headerLayout;

  @NonNull
  public final LinearLayout layoutBackupInterval;

  @NonNull
  public final ProgressBar progressBar;

  @NonNull
  public final TextView textViewLastBackup;

  @NonNull
  public final TextView textViewNextBackup;

  private ActivityExportConfigurationBinding(@NonNull ConstraintLayout rootView,
      @NonNull Button buttonBack, @NonNull Button buttonBrowseLocal,
      @NonNull Button buttonMonthlyClosing, @NonNull Button buttonSave,
      @NonNull Button buttonTestLocal, @NonNull Button buttonTestNetwork,
      @NonNull CheckBox checkBoxAutoBackup, @NonNull EditText editTextBackupInterval,
      @NonNull EditText editTextLocalPath, @NonNull EditText editTextNetworkPath,
      @NonNull LinearLayout headerLayout, @NonNull LinearLayout layoutBackupInterval,
      @NonNull ProgressBar progressBar, @NonNull TextView textViewLastBackup,
      @NonNull TextView textViewNextBackup) {
    this.rootView = rootView;
    this.buttonBack = buttonBack;
    this.buttonBrowseLocal = buttonBrowseLocal;
    this.buttonMonthlyClosing = buttonMonthlyClosing;
    this.buttonSave = buttonSave;
    this.buttonTestLocal = buttonTestLocal;
    this.buttonTestNetwork = buttonTestNetwork;
    this.checkBoxAutoBackup = checkBoxAutoBackup;
    this.editTextBackupInterval = editTextBackupInterval;
    this.editTextLocalPath = editTextLocalPath;
    this.editTextNetworkPath = editTextNetworkPath;
    this.headerLayout = headerLayout;
    this.layoutBackupInterval = layoutBackupInterval;
    this.progressBar = progressBar;
    this.textViewLastBackup = textViewLastBackup;
    this.textViewNextBackup = textViewNextBackup;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityExportConfigurationBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityExportConfigurationBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_export_configuration, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityExportConfigurationBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.buttonBack;
      Button buttonBack = ViewBindings.findChildViewById(rootView, id);
      if (buttonBack == null) {
        break missingId;
      }

      id = R.id.buttonBrowseLocal;
      Button buttonBrowseLocal = ViewBindings.findChildViewById(rootView, id);
      if (buttonBrowseLocal == null) {
        break missingId;
      }

      id = R.id.buttonMonthlyClosing;
      Button buttonMonthlyClosing = ViewBindings.findChildViewById(rootView, id);
      if (buttonMonthlyClosing == null) {
        break missingId;
      }

      id = R.id.buttonSave;
      Button buttonSave = ViewBindings.findChildViewById(rootView, id);
      if (buttonSave == null) {
        break missingId;
      }

      id = R.id.buttonTestLocal;
      Button buttonTestLocal = ViewBindings.findChildViewById(rootView, id);
      if (buttonTestLocal == null) {
        break missingId;
      }

      id = R.id.buttonTestNetwork;
      Button buttonTestNetwork = ViewBindings.findChildViewById(rootView, id);
      if (buttonTestNetwork == null) {
        break missingId;
      }

      id = R.id.checkBoxAutoBackup;
      CheckBox checkBoxAutoBackup = ViewBindings.findChildViewById(rootView, id);
      if (checkBoxAutoBackup == null) {
        break missingId;
      }

      id = R.id.editTextBackupInterval;
      EditText editTextBackupInterval = ViewBindings.findChildViewById(rootView, id);
      if (editTextBackupInterval == null) {
        break missingId;
      }

      id = R.id.editTextLocalPath;
      EditText editTextLocalPath = ViewBindings.findChildViewById(rootView, id);
      if (editTextLocalPath == null) {
        break missingId;
      }

      id = R.id.editTextNetworkPath;
      EditText editTextNetworkPath = ViewBindings.findChildViewById(rootView, id);
      if (editTextNetworkPath == null) {
        break missingId;
      }

      id = R.id.headerLayout;
      LinearLayout headerLayout = ViewBindings.findChildViewById(rootView, id);
      if (headerLayout == null) {
        break missingId;
      }

      id = R.id.layoutBackupInterval;
      LinearLayout layoutBackupInterval = ViewBindings.findChildViewById(rootView, id);
      if (layoutBackupInterval == null) {
        break missingId;
      }

      id = R.id.progressBar;
      ProgressBar progressBar = ViewBindings.findChildViewById(rootView, id);
      if (progressBar == null) {
        break missingId;
      }

      id = R.id.textViewLastBackup;
      TextView textViewLastBackup = ViewBindings.findChildViewById(rootView, id);
      if (textViewLastBackup == null) {
        break missingId;
      }

      id = R.id.textViewNextBackup;
      TextView textViewNextBackup = ViewBindings.findChildViewById(rootView, id);
      if (textViewNextBackup == null) {
        break missingId;
      }

      return new ActivityExportConfigurationBinding((ConstraintLayout) rootView, buttonBack,
          buttonBrowseLocal, buttonMonthlyClosing, buttonSave, buttonTestLocal, buttonTestNetwork,
          checkBoxAutoBackup, editTextBackupInterval, editTextLocalPath, editTextNetworkPath,
          headerLayout, layoutBackupInterval, progressBar, textViewLastBackup, textViewNextBackup);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
